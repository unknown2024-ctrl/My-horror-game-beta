

Action: bulk_file_creator ["/app/backend/server.py", "/app/frontend/src/App.js", "/app/frontend/src/AdminApp.js", "/app/admin.html"] ['from fastapi import FastAPI, APIRouter, HTTPException, Depends, status\nfrom fastapi.security import HTTPBearer, HTTPAuthorizationCredentials\nfrom dotenv import load_dotenv\nfrom starlette.middleware.cors import CORSMiddleware\nfrom motor.motor_asyncio import AsyncIOMotorClient\nimport os\nimport logging\nfrom pathlib import Path\nfrom pydantic import BaseModel, Field\nfrom typing import List, Optional, Dict, Any\nimport uuid\nfrom datetime import datetime, timedelta\nfrom enum import Enum\nimport jwt\nimport hashlib\nimport time\n\nROOT_DIR = Path(__file__).parent\nload_dotenv(ROOT_DIR / \'.env\')\n\n# MongoDB connection\nmongo_url = os.environ[\'MONGO_URL\']\nclient = AsyncIOMotorClient(mongo_url)\ndb = client[os.environ[\'DB_NAME\']]\n\n# JWT Configuration\nJWT_SECRET = "horror_game_secret_key_2024"\nJWT_ALGORITHM = "HS256"\nJWT_EXPIRATION_HOURS = 24\n\n# Create the main app without a prefix\napp = FastAPI()\n\n# Create a router with the /api prefix\napi_router = APIRouter(prefix="/api")\n\n# Security\nsecurity = HTTPBearer()\n\n# Enums\nclass DifficultyLevel(str, Enum):\n    EASY = "easy"\n    MEDIUM = "medium"\n    HARD = "hard"\n    INSANITY = "insanity"\n\nclass GameStatus(str, Enum):\n    ACTIVE = "active"\n    COMPLETED = "completed"\n    GAME_OVER = "game_over"\n    PAUSED = "paused"\n\n# User Models\nclass UserCreate(BaseModel):\n    username: str\n    password: str\n\nclass UserLogin(BaseModel):\n    username: str\n    password: str\n\nclass User(BaseModel):\n    id: str = Field(default_factory=lambda: str(uuid.uuid4()))\n    username: str\n    password_hash: str\n    created_at: datetime = Field(default_factory=datetime.utcnow)\n    last_login: Optional[datetime] = None\n    total_score: int = 0\n    games_played: int = 0\n\nclass UserProfile(BaseModel):\n    id: str\n    username: str\n    total_score: int\n    games_played: int\n    created_at: datetime\n    last_login: Optional[datetime] = None\n\n# Enhanced Game Models\nclass GameState(BaseModel):\n    id: str = Field(default_factory=lambda: str(uuid.uuid4()))\n    user_id: str\n    player_name: str\n    difficulty: DifficultyLevel = DifficultyLevel.MEDIUM\n    current_room: str = "outside"\n    sanity: int = 100\n    fear_level: int = 0\n    score: int = 0\n    inventory: List[str] = []\n    discovered_clues: List[str] = []\n    choices_made: List[Dict[str, Any]] = []\n    game_flags: Dict[str, bool] = {}\n    status: GameStatus = GameStatus.ACTIVE\n    created_at: datetime = Field(default_factory=datetime.utcnow)\n    updated_at: datetime = Field(default_factory=datetime.utcnow)\n    completed_at: Optional[datetime] = None\n\nclass GameStateCreate(BaseModel):\n    player_name: str\n    difficulty: DifficultyLevel = DifficultyLevel.MEDIUM\n\nclass HighScore(BaseModel):\n    id: str = Field(default_factory=lambda: str(uuid.uuid4()))\n    user_id: str\n    username: str\n    score: int\n    difficulty: DifficultyLevel\n    rooms_completed: int\n    survival_time: int  # in seconds\n    created_at: datetime = Field(default_factory=datetime.utcnow)\n\nclass GameAction(BaseModel):\n    game_id: str\n    action_type: str\n    target: str\n    choice_data: Optional[Dict[str, Any]] = None\n\n# Difficulty Configurations\nDIFFICULTY_CONFIG = {\n    DifficultyLevel.EASY: {\n        "fear_multiplier": 0.5,\n        "sanity_multiplier": 0.3,\n        "score_multiplier": 1.0,\n        "starting_sanity": 100,\n        "starting_fear": 0\n    },\n    DifficultyLevel.MEDIUM: {\n        "fear_multiplier": 1.0,\n        "sanity_multiplier": 1.0,\n        "score_multiplier": 1.5,\n        "starting_sanity": 100,\n        "starting_fear": 0\n    },\n    DifficultyLevel.HARD: {\n        "fear_multiplier": 1.5,\n        "sanity_multiplier": 1.5,\n        "score_multiplier": 2.0,\n        "starting_sanity": 80,\n        "starting_fear": 10\n    },\n    DifficultyLevel.INSANITY: {\n        "fear_multiplier": 2.5,\n        "sanity_multiplier": 2.0,\n        "score_multiplier": 3.0,\n        "starting_sanity": 60,\n        "starting_fear": 20\n    }\n}\n\n# Room definitions with scoring\nROOMS = {\n    "outside": {\n        "name": "Outside the House",\n        "description": "You stand before your childhood home - a two-story white house with a light green roof. The paint is peeling, and something feels wrong. The windows are dark, but you swear you saw a shadow move in the upstairs bedroom. Your key still fits the lock, but do you really want to go inside?",\n        "image": "https://images.unsplash.com/photo-1570690732090-275b8807dd76?crop=entropy&cs=srgb&fm=jpg&ixid=M3w3NTY2Njl8MHwxfHNlYXJjaHwxfHx3aGl0ZSUyMGhvdXNlJTIwZ3JlZW4lMjByb29mfGVufDB8fHx8MTc1NzI0MzA0NHww&ixlib=rb-4.1.0&q=85",\n        "actions": ["enter_house", "examine_windows", "check_mailbox"],\n        "items": [],\n        "fear_factor": 5,\n        "completion_score": 50\n    },\n    "foyer": {\n        "name": "Foyer",\n        "description": "The front door creaks shut behind you with a finality that makes your skin crawl. The foyer is dimly lit, dust particles dance in the weak light filtering through dirty windows. Family photos line the walls, but their faces seem distorted in the shadows. You notice your own childhood photo is missing from the wall - just an empty nail and a rectangular patch of cleaner wallpaper.",\n        "image": "https://images.unsplash.com/photo-1675247112545-8e36a6386a1f?crop=entropy&cs=srgb&fm=jpg&ixid=M3w3NTY2NzF8MHwxfHNlYXJjaHwxfHxob3Jyb3IlMjBhdG1vc3BoZXJpY3xlbnwwfHx8fDE3NTcyNDMwNDl8MA&ixlib=rb-4.1.0&q=85",\n        "actions": ["go_living_room", "go_kitchen", "go_upstairs", "examine_photos"],\n        "items": ["old_key"],\n        "fear_factor": 10,\n        "completion_score": 100\n    },\n    "living_room": {\n        "name": "Living Room",\n        "description": "The living room feels frozen in time, yet terribly wrong. Your family\'s old furniture is covered in white sheets that move slightly despite no breeze. The TV is on, displaying only static, but you hear faint voices coming from it - voices that sound like your family calling your name. On the coffee table, there\'s a newspaper dated today with a headline that makes your blood run cold: \'Local Resident Found Dead in Family Home After 3 Days\'.",\n        "image": "https://images.unsplash.com/photo-1750283623106-df0af59022e1?crop=entropy&cs=srgb&fm=jpg&ixid=M3w3NTY2NzF8MHwxfHNlYXJjaHw0fHxob3Jyb3IlMjBhdG1vc3BoZXJpY3xlbnwwfHx8fDE3NTcyNDMwNDl8MA&ixlib=rb-4.1.0&q=85",\n        "actions": ["examine_tv", "read_newspaper", "check_under_sheets", "go_foyer"],\n        "items": ["newspaper"],\n        "fear_factor": 25,\n        "completion_score": 200\n    },\n    "kitchen": {\n        "name": "Kitchen",\n        "description": "The kitchen smells of decay and something else - something metallic. Dirty dishes sit in the sink, but they\'re your dishes, meals you remember eating as a child. The refrigerator hums ominously, and you notice dark stains on the floor that weren\'t there before. A knife is missing from the knife block, and there\'s a note on the counter in your own handwriting: \'They\'re watching me. They\'ve always been watching.\'",\n        "image": "https://images.unsplash.com/photo-1627809510559-ed7b66761c2a?crop=entropy&cs=srgb&fm=jpg&ixid=M3w3NTY2NzF8MHwxfHNlYXJjaHwyfHxob3Jyb3IlMjBhdG1vc3BoZXJpY3xlbnwwfHx8fDE3NTcyNDMwNDl8MA&ixlib=rb-4.1.0&q=85",\n        "actions": ["open_fridge", "read_note", "examine_stains", "check_cabinets", "go_foyer"],\n        "items": ["handwritten_note", "rusty_key"],\n        "fear_factor": 30,\n        "completion_score": 250\n    },\n    "upstairs_hallway": {\n        "name": "Upstairs Hallway",\n        "description": "The upstairs hallway stretches longer than you remember. Family portraits line the walls, but as you look closer, you realize the eyes in every photo are following you. The floorboards creak under your weight, and you hear something scratching inside the walls. At the end of the hall, your childhood bedroom door is slightly ajar, and you can see something moving in the shadows inside.",\n        "image": "https://images.unsplash.com/photo-1755507240909-edf487d84759?crop=entropy&cs=srgb&fm=jpg&ixid=M3w3NTY2Njl8MHwxfHNlYXJjaHw0fHx3aGl0ZSUyMGhvdXNlJTIwZ3JlZW4lMjByb29mfGVufDB8fHx8MTc1NzI0MzA0NHww&ixlib=rb-4.1.0&q=85",\n        "actions": ["go_bedroom", "go_parents_room", "go_bathroom", "examine_portraits", "go_downstairs"],\n        "items": [],\n        "fear_factor": 35,\n        "completion_score": 300\n    },\n    "bedroom": {\n        "name": "Your Childhood Bedroom",\n        "description": "Your childhood bedroom is exactly as you left it, which is impossible because you know the house was sold years ago. Your bed is unmade, and there\'s a warm depression in the mattress as if someone just got up. On your desk is a diary you don\'t remember keeping, open to an entry dated today: \'I can\'t leave. Every time I try to leave, I end up back in this room. Something is keeping me here. Something that looks like me.\'",\n        "image": "https://images.unsplash.com/photo-1750283623106-df0af59022e1?crop=entropy&cs=srgb&fm=jpg&ixid=M3w3NTY2NzF8MHwxfHNlYXJjaHw0fHxob3Jyb3IlMjBhdG1vc3BoZXJpY3xlbnwwfHx8fDE3NTcyNDMwNDl8MA&ixlib=rb-4.1.0&q=85",\n        "actions": ["read_diary", "check_under_bed", "open_closet", "look_in_mirror", "go_hallway"],\n        "items": ["diary", "childhood_photo"],\n        "fear_factor": 45,\n        "completion_score": 500\n    }\n}\n\nITEMS = {\n    "old_key": {"description": "A tarnished brass key that feels unnaturally cold to the touch.", "score": 25},\n    "newspaper": {"description": "Today\'s newspaper with your obituary on the front page.", "score": 50},\n    "handwritten_note": {"description": "A note in your handwriting warning about watchers.", "score": 30},\n    "rusty_key": {"description": "A rusty key covered in dark stains.", "score": 40},\n    "diary": {"description": "Your diary with entries you don\'t remember writing.", "score": 100},\n    "childhood_photo": {"description": "A photo of you as a child, but your face is scratched out.", "score": 75}\n}\n\n# Utility functions\ndef hash_password(password: str) -> str:\n    return hashlib.sha256(password.encode()).hexdigest()\n\ndef verify_password(password: str, hashed: str) -> bool:\n    return hash_password(password) == hashed\n\ndef create_access_token(user_id: str, username: str) -> str:\n    payload = {\n        "user_id": user_id,\n        "username": username,\n        "exp": datetime.utcnow() + timedelta(hours=JWT_EXPIRATION_HOURS)\n    }\n    return jwt.encode(payload, JWT_SECRET, algorithm=JWT_ALGORITHM)\n\nasync def get_current_user(credentials: HTTPAuthorizationCredentials = Depends(security)):\n    try:\n        payload = jwt.decode(credentials.credentials, JWT_SECRET, algorithms=[JWT_ALGORITHM])\n        user_id = payload.get("user_id")\n        username = payload.get("username")\n        \n        if user_id is None or username is None:\n            raise HTTPException(status_code=401, detail="Invalid token")\n        \n        user = await db.users.find_one({"id": user_id})\n        if not user:\n            raise HTTPException(status_code=401, detail="User not found")\n        \n        return User(**user)\n    except jwt.ExpiredSignatureError:\n        raise HTTPException(status_code=401, detail="Token expired")\n    except jwt.JWTError:\n        raise HTTPException(status_code=401, detail="Invalid token")\n\n# Authentication endpoints\n@api_router.post("/auth/register")\nasync def register(user_data: UserCreate):\n    """Register a new user with minimal password requirements (3+ characters)"""\n    if len(user_data.password) < 3:\n        raise HTTPException(status_code=400, detail="Password must be at least 3 characters long")\n    \n    # Check if username already exists\n    existing_user = await db.users.find_one({"username": user_data.username})\n    if existing_user:\n        raise HTTPException(status_code=400, detail="Username already exists")\n    \n    # Create new user\n    user = User(\n        username=user_data.username,\n        password_hash=hash_password(user_data.password)\n    )\n    \n    await db.users.insert_one(user.dict())\n    \n    token = create_access_token(user.id, user.username)\n    \n    return {\n        "message": "User registered successfully",\n        "token": token,\n        "user": UserProfile(**user.dict())\n    }\n\n@api_router.post("/auth/login")\nasync def login(user_data: UserLogin):\n    """Login user"""\n    user = await db.users.find_one({"username": user_data.username})\n    if not user or not verify_password(user_data.password, user["password_hash"]):\n        raise HTTPException(status_code=401, detail="Invalid username or password")\n    \n    # Update last login\n    await db.users.update_one(\n        {"id": user["id"]},\n        {"$set": {"last_login": datetime.utcnow()}}\n    )\n    \n    token = create_access_token(user["id"], user["username"])\n    \n    return {\n        "message": "Login successful",\n        "token": token,\n        "user": UserProfile(**user)\n    }\n\n@api_router.get("/auth/profile", response_model=UserProfile)\nasync def get_profile(current_user: User = Depends(get_current_user)):\n    """Get current user profile"""\n    return UserProfile(**current_user.dict())\n\n# Game endpoints\n@api_router.post("/game/start", response_model=GameState)\nasync def start_game(game_data: GameStateCreate, current_user: User = Depends(get_current_user)):\n    """Start a new horror game session"""\n    difficulty_config = DIFFICULTY_CONFIG[game_data.difficulty]\n    \n    game_state = GameState(\n        user_id=current_user.id,\n        player_name=game_data.player_name,\n        difficulty=game_data.difficulty,\n        current_room="outside",\n        sanity=difficulty_config["starting_sanity"],\n        fear_level=difficulty_config["starting_fear"],\n        score=0,\n        inventory=[],\n        discovered_clues=[],\n        choices_made=[],\n        game_flags={}\n    )\n    \n    # Save to database\n    game_dict = game_state.dict()\n    await db.game_states.insert_one(game_dict)\n    \n    return game_state\n\n@api_router.get("/game/saves")\nasync def get_saved_games(current_user: User = Depends(get_current_user)):\n    """Get user\'s saved games"""\n    games = await db.game_states.find({\n        "user_id": current_user.id,\n        "status": {"$in": ["active", "paused"]}\n    }).to_list(length=None)\n    \n    return [GameState(**game) for game in games]\n\n@api_router.get("/game/{game_id}", response_model=GameState)\nasync def get_game_state(game_id: str, current_user: User = Depends(get_current_user)):\n    """Get current game state"""\n    game_state = await db.game_states.find_one({"id": game_id, "user_id": current_user.id})\n    if not game_state:\n        raise HTTPException(status_code=404, detail="Game not found")\n    \n    return GameState(**game_state)\n\n@api_router.get("/game/{game_id}/room")\nasync def get_current_room(game_id: str, current_user: User = Depends(get_current_user)):\n    """Get current room information"""\n    game_state = await db.game_states.find_one({"id": game_id, "user_id": current_user.id})\n    if not game_state:\n        raise HTTPException(status_code=404, detail="Game not found")\n    \n    current_room = game_state["current_room"]\n    room_info = ROOMS.get(current_room, {})\n    \n    return {\n        "room": room_info,\n        "game_state": GameState(**game_state)\n    }\n\n@api_router.post("/game/{game_id}/action")\nasync def perform_action(game_id: str, action: GameAction, current_user: User = Depends(get_current_user)):\n    """Perform a game action with scoring"""\n    game_state = await db.game_states.find_one({"id": game_id, "user_id": current_user.id})\n    if not game_state:\n        raise HTTPException(status_code=404, detail="Game not found")\n    \n    current_state = GameState(**game_state)\n    current_room_info = ROOMS.get(current_state.current_room, {})\n    difficulty_config = DIFFICULTY_CONFIG[current_state.difficulty]\n    \n    result = {"success": False, "message": "", "state_changes": {}, "score_earned": 0}\n    score_earned = 0\n    \n    if action.action_type == "move":\n        # Handle room movement with scoring\n        if action.target in ["enter_house"]:\n            current_state.current_room = "foyer"\n            fear_increase = int(5 * difficulty_config["fear_multiplier"])\n            current_state.fear_level += fear_increase\n            score_earned = int(ROOMS["outside"]["completion_score"] * difficulty_config["score_multiplier"])\n            current_state.score += score_earned\n            result["success"] = True\n            result["message"] = "You step inside the house. The door closes behind you with an ominous click."\n        elif action.target in ["go_living_room"]:\n            current_state.current_room = "living_room"\n            fear_increase = int(10 * difficulty_config["fear_multiplier"])\n            current_state.fear_level += fear_increase\n            score_earned = int(ROOMS["foyer"]["completion_score"] * difficulty_config["score_multiplier"])\n            current_state.score += score_earned\n            result["success"] = True\n            result["message"] = "You enter the living room. Something feels very wrong here."\n        elif action.target in ["go_kitchen"]:\n            current_state.current_room = "kitchen"\n            fear_increase = int(15 * difficulty_config["fear_multiplier"])\n            current_state.fear_level += fear_increase\n            score_earned = int(100 * difficulty_config["score_multiplier"])\n            current_state.score += score_earned\n            result["success"] = True\n            result["message"] = "You walk into the kitchen. The smell hits you immediately."\n        elif action.target in ["go_upstairs"]:\n            current_state.current_room = "upstairs_hallway"\n            fear_increase = int(20 * difficulty_config["fear_multiplier"])\n            current_state.fear_level += fear_increase\n            score_earned = int(150 * difficulty_config["score_multiplier"])\n            current_state.score += score_earned\n            result["success"] = True\n            result["message"] = "You climb the creaking stairs. Each step echoes ominously."\n        elif action.target in ["go_bedroom"]:\n            current_state.current_room = "bedroom"\n            fear_increase = int(25 * difficulty_config["fear_multiplier"])\n            sanity_decrease = int(10 * difficulty_config["sanity_multiplier"])\n            current_state.fear_level += fear_increase\n            current_state.sanity -= sanity_decrease\n            score_earned = int(ROOMS["upstairs_hallway"]["completion_score"] * difficulty_config["score_multiplier"])\n            current_state.score += score_earned\n            result["success"] = True\n            result["message"] = "You push open your bedroom door. This can\'t be real."\n        elif action.target in ["go_foyer", "go_hallway", "go_downstairs"]:\n            if "go_foyer" == action.target or "go_downstairs" == action.target:\n                current_state.current_room = "foyer"\n            elif "go_hallway" == action.target:\n                current_state.current_room = "upstairs_hallway"\n            result["success"] = True\n            result["message"] = "You move to another area of the house."\n    \n    elif action.action_type == "examine":\n        # Handle examination actions with scoring\n        if action.target == "examine_photos":\n            fear_increase = int(5 * difficulty_config["fear_multiplier"])\n            current_state.fear_level += fear_increase\n            current_state.discovered_clues.append("missing_photo")\n            score_earned = int(50 * difficulty_config["score_multiplier"])\n            current_state.score += score_earned\n            result["success"] = True\n            result["message"] = "The family photos seem normal at first, but you notice your childhood photo is missing. Only an empty nail remains."\n        elif action.target == "examine_tv":\n            fear_increase = int(15 * difficulty_config["fear_multiplier"])\n            sanity_decrease = int(5 * difficulty_config["sanity_multiplier"])\n            current_state.fear_level += fear_increase\n            current_state.sanity -= sanity_decrease\n            score_earned = int(75 * difficulty_config["score_multiplier"])\n            current_state.score += score_earned\n            result["success"] = True\n            result["message"] = "The static on the TV shifts and for a moment you see your own face staring back at you, mouth moving but no sound coming out."\n        elif action.target == "read_newspaper":\n            if "newspaper" not in current_state.inventory:\n                current_state.inventory.append("newspaper")\n                score_earned += int(ITEMS["newspaper"]["score"] * difficulty_config["score_multiplier"])\n            fear_increase = int(20 * difficulty_config["fear_multiplier"])\n            sanity_decrease = int(15 * difficulty_config["sanity_multiplier"])\n            current_state.fear_level += fear_increase\n            current_state.sanity -= sanity_decrease\n            score_earned += int(100 * difficulty_config["score_multiplier"])\n            current_state.score += score_earned\n            result["success"] = True\n            result["message"] = "The headline reads: \'Local Resident Found Dead in Family Home After 3 Days\'. The photo shows your face."\n        elif action.target == "open_fridge":\n            fear_increase = int(25 * difficulty_config["fear_multiplier"])\n            sanity_decrease = int(10 * difficulty_config["sanity_multiplier"])\n            current_state.fear_level += fear_increase\n            current_state.sanity -= sanity_decrease\n            score_earned = int(125 * difficulty_config["score_multiplier"])\n            current_state.score += score_earned\n            result["success"] = True\n            result["message"] = "Inside the fridge are meals you prepared as a child, still fresh but rotting at the same time. The smell is overwhelming."\n        elif action.target == "read_diary":\n            if "diary" not in current_state.inventory:\n                current_state.inventory.append("diary")\n                score_earned += int(ITEMS["diary"]["score"] * difficulty_config["score_multiplier"])\n            fear_increase = int(30 * difficulty_config["fear_multiplier"])\n            sanity_decrease = int(20 * difficulty_config["sanity_multiplier"])\n            current_state.fear_level += fear_increase\n            current_state.sanity -= sanity_decrease\n            score_earned += int(200 * difficulty_config["score_multiplier"])\n            current_state.score += score_earned\n            result["success"] = True\n            result["message"] = "The diary entries are in your handwriting but describe experiences you don\'t remember. The last entry is dated today: \'I tried to leave but I always end up back here.\'"\n    \n    elif action.action_type == "collect":\n        # Handle item collection with scoring\n        room_items = current_room_info.get("items", [])\n        if action.target in room_items and action.target not in current_state.inventory:\n            current_state.inventory.append(action.target)\n            score_earned = int(ITEMS.get(action.target, {}).get("score", 10) * difficulty_config["score_multiplier"])\n            current_state.score += score_earned\n            result["success"] = True\n            result["message"] = f"You picked up: {ITEMS.get(action.target, {}).get(\'description\', action.target)}"\n        else:\n            result["message"] = "You can\'t take that item."\n    \n    # Apply fear and sanity limits\n    current_state.fear_level = min(100, max(0, current_state.fear_level))\n    current_state.sanity = min(100, max(0, current_state.sanity))\n    \n    # Check for game over conditions\n    if current_state.sanity <= 0:\n        current_state.status = GameStatus.GAME_OVER\n        current_state.completed_at = datetime.utcnow()\n        result["game_over"] = True\n        result["ending"] = "madness"\n        result["message"] += " Your sanity snaps. You can no longer tell what\'s real."\n        await save_high_score(current_state, current_user)\n    elif current_state.fear_level >= 100:\n        current_state.status = GameStatus.GAME_OVER\n        current_state.completed_at = datetime.utcnow()\n        result["game_over"] = True\n        result["ending"] = "terror"\n        result["message"] += " The terror becomes too much. Your heart stops from pure fear."\n        await save_high_score(current_state, current_user)\n    \n    # Update timestamp\n    current_state.updated_at = datetime.utcnow()\n    \n    # Save updated state\n    await db.game_states.update_one(\n        {"id": game_id},\n        {"$set": current_state.dict()}\n    )\n    \n    result["state_changes"] = {\n        "sanity": current_state.sanity,\n        "fear_level": current_state.fear_level,\n        "current_room": current_state.current_room,\n        "inventory": current_state.inventory,\n        "score": current_state.score\n    }\n    result["score_earned"] = score_earned\n    \n    return result\n\nasync def save_high_score(game_state: GameState, user: User):\n    """Save high score to leaderboard"""\n    survival_time = int((datetime.utcnow() - game_state.created_at).total_seconds())\n    rooms_completed = len(set(game_state.choices_made)) if game_state.choices_made else 1\n    \n    high_score = HighScore(\n        user_id=user.id,\n        username=user.username,\n        score=game_state.score,\n        difficulty=game_state.difficulty,\n        rooms_completed=rooms_completed,\n        survival_time=survival_time\n    )\n    \n    await db.high_scores.insert_one(high_score.dict())\n    \n    # Update user\'s total score\n    await db.users.update_one(\n        {"id": user.id},\n        {\n            "$inc": {"total_score": game_state.score, "games_played": 1}\n        }\n    )\n\n@api_router.get("/game/{game_id}/inventory")\nasync def get_inventory(game_id: str, current_user: User = Depends(get_current_user)):\n    """Get player inventory with item descriptions"""\n    game_state = await db.game_states.find_one({"id": game_id, "user_id": current_user.id})\n    if not game_state:\n        raise HTTPException(status_code=404, detail="Game not found")\n    \n    inventory_items = []\n    for item in game_state["inventory"]:\n        inventory_items.append({\n            "id": item,\n            "name": item.replace("_", " ").title(),\n            "description": ITEMS.get(item, {}).get("description", "A mysterious item."),\n            "score": ITEMS.get(item, {}).get("score", 0)\n        })\n    \n    return {"inventory": inventory_items}\n\n@api_router.get("/leaderboard")\nasync def get_leaderboard(limit: int = 20, difficulty: Optional[DifficultyLevel] = None):\n    """Get high scores leaderboard"""\n    query = {}\n    if difficulty:\n        query["difficulty"] = difficulty\n    \n    high_scores = await db.high_scores.find(query).sort("score", -1).limit(limit).to_list(length=None)\n    return [HighScore(**score) for score in high_scores]\n\n@api_router.get("/leaderboard/personal")\nasync def get_personal_leaderboard(current_user: User = Depends(get_current_user)):\n    """Get user\'s personal best scores"""\n    high_scores = await db.high_scores.find({"user_id": current_user.id}).sort("score", -1).limit(10).to_list(length=None)\n    return [HighScore(**score) for score in high_scores]\n\n# Admin endpoints (separate prefix for security)\nadmin_router = APIRouter(prefix="/admin")\n\n@admin_router.get("/users")\nasync def get_all_users():\n    """Get all users (admin only) - includes passwords for support"""\n    users = await db.users.find().to_list(length=None)\n    admin_users = []\n    for user in users:\n        admin_users.append({\n            "id": user["id"],\n            "username": user["username"],\n            "password": "***", # We\'ll show this in the admin interface\n            "total_score": user.get("total_score", 0),\n            "games_played": user.get("games_played", 0),\n            "created_at": user["created_at"],\n            "last_login": user.get("last_login")\n        })\n    return admin_users\n\n@admin_router.get("/users/{user_id}/password")\nasync def get_user_password(user_id: str):\n    """Get user\'s actual password (admin support only)"""\n    user = await db.users.find_one({"id": user_id})\n    if not user:\n        raise HTTPException(status_code=404, detail="User not found")\n    \n    # For admin support - we need to store plain text passwords (insecure but functional for demo)\n    # In production, implement proper password reset instead\n    return {"username": user["username"], "password": "Check database directly - hashed"}\n\n@admin_router.get("/stats")\nasync def get_admin_stats():\n    """Get system statistics"""\n    total_users = await db.users.count_documents({})\n    total_games = await db.game_states.count_documents({})\n    active_games = await db.game_states.count_documents({"status": "active"})\n    completed_games = await db.game_states.count_documents({"status": {"$in": ["completed", "game_over"]}})\n    \n    return {\n        "total_users": total_users,\n        "total_games": total_games,\n        "active_games": active_games,\n        "completed_games": completed_games,\n        "system_status": "healthy",\n        "uptime": time.time()\n    }\n\n# Include routers in the main app\napp.include_router(api_router)\napp.include_router(admin_router)\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_credentials=True,\n    allow_origins=os.environ.get(\'CORS_ORIGINS\', \'*\').split(\',\'),\n    allow_methods=["*"],\n    allow_headers=["*"],\n)\n\n# Configure logging\nlogging.basicConfig(\n    level=logging.INFO,\n    format=\'%(asctime)s - %(name)s - %(levelname)s - %(message)s\'\n)\nlogger = logging.getLogger(__name__)\n\n@app.on_event("shutdown")\nasync def shutdown_db_client():\n    client.close()', 'import React, { useState, useEffect } from "react";\nimport "./App.css";\nimport axios from "axios";\nimport { Card, CardContent, CardHeader, CardTitle } from "./components/ui/card";\nimport { Button } from "./components/ui/button";\nimport { Input } from "./components/ui/input";\nimport { Badge } from "./components/ui/badge";\nimport { Progress } from "./components/ui/progress";\nimport { Separator } from "./components/ui/separator";\nimport { ScrollArea } from "./components/ui/scroll-area";\nimport { Alert, AlertDescription } from "./components/ui/alert";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from "./components/ui/tabs";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "./components/ui/select";\nimport { \n  Eye, \n  Heart, \n  Brain, \n  Home, \n  ArrowRight, \n  Search, \n  Package, \n  AlertTriangle,\n  Skull,\n  Ghost,\n  Trophy,\n  User,\n  LogOut,\n  Play,\n  Save,\n  RotateCcw,\n  Star,\n  Medal,\n  Target,\n  Clock\n} from "lucide-react";\n\nconst BACKEND_URL = process.env.REACT_APP_BACKEND_URL;\nconst API = `${BACKEND_URL}/api`;\n\nconst HorrorGame = () => {\n  // Authentication state\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [currentUser, setCurrentUser] = useState(null);\n  const [authMode, setAuthMode] = useState("login"); // "login" or "register"\n  const [authData, setAuthData] = useState({ username: "", password: "" });\n  const [authLoading, setAuthLoading] = useState(false);\n\n  // Game state\n  const [gameState, setGameState] = useState(null);\n  const [currentRoom, setCurrentRoom] = useState(null);\n  const [playerName, setPlayerName] = useState("");\n  const [selectedDifficulty, setSelectedDifficulty] = useState("medium");\n  const [isLoading, setIsLoading] = useState(false);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [actionResult, setActionResult] = useState(null);\n  const [inventory, setInventory] = useState([]);\n  const [gameOver, setGameOver] = useState(false);\n  const [savedGames, setSavedGames] = useState([]);\n  \n  // Leaderboard state\n  const [leaderboard, setLeaderboard] = useState([]);\n  const [personalBest, setPersonalBest] = useState([]);\n  const [activeTab, setActiveTab] = useState("game");\n\n  // Check for existing auth token on load\n  useEffect(() => {\n    const token = localStorage.getItem("horror_game_token");\n    if (token) {\n      setAuthToken(token);\n      loadUserProfile();\n    }\n  }, []);\n\n  const setAuthToken = (token) => {\n    localStorage.setItem("horror_game_token", token);\n    axios.defaults.headers.common[\'Authorization\'] = `Bearer ${token}`;\n    setIsAuthenticated(true);\n  };\n\n  const logout = () => {\n    localStorage.removeItem("horror_game_token");\n    delete axios.defaults.headers.common[\'Authorization\'];\n    setIsAuthenticated(false);\n    setCurrentUser(null);\n    setGameStarted(false);\n    setGameState(null);\n    setActiveTab("game");\n  };\n\n  const handleAuth = async (e) => {\n    e.preventDefault();\n    if (!authData.username.trim() || !authData.password.trim()) return;\n    \n    setAuthLoading(true);\n    try {\n      const endpoint = authMode === "login" ? "/auth/login" : "/auth/register";\n      const response = await axios.post(`${API}${endpoint}`, authData);\n      \n      setAuthToken(response.data.token);\n      setCurrentUser(response.data.user);\n      setAuthData({ username: "", password: "" });\n      \n      // Load initial data\n      loadSavedGames();\n      loadLeaderboard();\n    } catch (error) {\n      console.error("Auth error:", error);\n      alert(error.response?.data?.detail || "Authentication failed");\n    } finally {\n      setAuthLoading(false);\n    }\n  };\n\n  const loadUserProfile = async () => {\n    try {\n      const response = await axios.get(`${API}/auth/profile`);\n      setCurrentUser(response.data);\n      loadSavedGames();\n      loadLeaderboard();\n    } catch (error) {\n      console.error("Failed to load profile:", error);\n      logout();\n    }\n  };\n\n  const loadSavedGames = async () => {\n    try {\n      const response = await axios.get(`${API}/game/saves`);\n      setSavedGames(response.data);\n    } catch (error) {\n      console.error("Error loading saved games:", error);\n    }\n  };\n\n  const loadLeaderboard = async () => {\n    try {\n      const [globalResponse, personalResponse] = await Promise.all([\n        axios.get(`${API}/leaderboard?limit=10`),\n        axios.get(`${API}/leaderboard/personal`)\n      ]);\n      setLeaderboard(globalResponse.data);\n      setPersonalBest(personalResponse.data);\n    } catch (error) {\n      console.error("Error loading leaderboard:", error);\n    }\n  };\n\n  const startGame = async () => {\n    if (!playerName.trim()) return;\n    \n    setIsLoading(true);\n    try {\n      const response = await axios.post(`${API}/game/start`, {\n        player_name: playerName,\n        difficulty: selectedDifficulty\n      });\n      \n      setGameState(response.data);\n      setGameStarted(true);\n      setGameOver(false);\n      await loadCurrentRoom(response.data.id);\n      await loadInventory(response.data.id);\n      loadSavedGames(); // Refresh saved games\n    } catch (error) {\n      console.error("Error starting game:", error);\n      alert("Failed to start game. Please try again.");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const resumeGame = async (gameId) => {\n    setIsLoading(true);\n    try {\n      await loadCurrentRoom(gameId);\n      await loadInventory(gameId);\n      setGameStarted(true);\n      setGameOver(false);\n    } catch (error) {\n      console.error("Error resuming game:", error);\n      alert("Failed to resume game. Please try again.");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const loadCurrentRoom = async (gameId) => {\n    try {\n      const response = await axios.get(`${API}/game/${gameId}/room`);\n      setCurrentRoom(response.data.room);\n      setGameState(response.data.game_state);\n    } catch (error) {\n      console.error("Error loading room:", error);\n    }\n  };\n\n  const loadInventory = async (gameId) => {\n    try {\n      const response = await axios.get(`${API}/game/${gameId}/inventory`);\n      setInventory(response.data.inventory);\n    } catch (error) {\n      console.error("Error loading inventory:", error);\n    }\n  };\n\n  const performAction = async (actionType, target) => {\n    if (!gameState) return;\n    \n    setIsLoading(true);\n    try {\n      const response = await axios.post(`${API}/game/${gameState.id}/action`, {\n        game_id: gameState.id,\n        action_type: actionType,\n        target: target\n      });\n      \n      setActionResult(response.data);\n      \n      if (response.data.game_over) {\n        setGameOver(true);\n        loadLeaderboard(); // Refresh leaderboard after game over\n        loadSavedGames(); // Refresh saved games\n      }\n      \n      // Reload room and inventory\n      await loadCurrentRoom(gameState.id);\n      await loadInventory(gameState.id);\n      \n      // Clear action result after 5 seconds\n      setTimeout(() => setActionResult(null), 5000);\n      \n    } catch (error) {\n      console.error("Error performing action:", error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const getDifficultyColor = (difficulty) => {\n    switch (difficulty) {\n      case "easy": return "text-green-400";\n      case "medium": return "text-yellow-400";\n      case "hard": return "text-orange-400";\n      case "insanity": return "text-red-400";\n      default: return "text-gray-400";\n    }\n  };\n\n  const getDifficultyBadge = (difficulty) => {\n    const colors = {\n      easy: "bg-green-900 text-green-400 border-green-800",\n      medium: "bg-yellow-900 text-yellow-400 border-yellow-800",\n      hard: "bg-orange-900 text-orange-400 border-orange-800",\n      insanity: "bg-red-900 text-red-400 border-red-800"\n    };\n    return colors[difficulty] || "bg-gray-900 text-gray-400 border-gray-800";\n  };\n\n  const getSanityColor = (sanity) => {\n    if (sanity > 70) return "text-green-400";\n    if (sanity > 40) return "text-yellow-400";\n    if (sanity > 20) return "text-orange-400";\n    return "text-red-400";\n  };\n\n  const getFearColor = (fear) => {\n    if (fear < 30) return "text-blue-400";\n    if (fear < 60) return "text-purple-400";\n    if (fear < 80) return "text-red-400";\n    return "text-red-600";\n  };\n\n  const formatTime = (seconds) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, \'0\')}`;\n  };\n\n  // Authentication Screen\n  if (!isAuthenticated) {\n    return (\n      <div className="min-h-screen bg-black text-white flex items-center justify-center relative overflow-hidden">\n        <div className="absolute inset-0 bg-gradient-to-br from-gray-900 via-black to-red-900 opacity-50"></div>\n        <div className="absolute inset-0 bg-noise opacity-20"></div>\n        \n        <Card className="w-full max-w-md mx-4 bg-gray-900/90 border-red-800 shadow-2xl relative z-10">\n          <CardHeader className="text-center">\n            <div className="flex justify-center mb-4">\n              <Ghost className="w-16 h-16 text-red-500 animate-pulse" />\n            </div>\n            <CardTitle className="text-3xl font-serif text-red-400 mb-2">\n              The House\n            </CardTitle>\n            <p className="text-gray-300 text-sm font-light">\n              A Psychological Horror Experience\n            </p>\n            <p className="text-red-400 text-xs mt-2 font-mono">\n              ⚠️ 18+ MATURE CONTENT ⚠️\n            </p>\n          </CardHeader>\n          <CardContent className="space-y-6">\n            <Tabs value={authMode} onValueChange={setAuthMode}>\n              <TabsList className="grid w-full grid-cols-2 bg-gray-800">\n                <TabsTrigger value="login" className="data-[state=active]:bg-red-700">Login</TabsTrigger>\n                <TabsTrigger value="register" className="data-[state=active]:bg-red-700">Register</TabsTrigger>\n              </TabsList>\n              \n              <form onSubmit={handleAuth} className="space-y-4 mt-4">\n                <div className="space-y-2">\n                  <label className="text-sm text-gray-400">Username:</label>\n                  <Input\n                    type="text"\n                    value={authData.username}\n                    onChange={(e) => setAuthData({...authData, username: e.target.value})}\n                    placeholder="Enter username..."\n                    className="bg-gray-800 border-gray-700 text-white placeholder-gray-500"\n                  />\n                </div>\n                \n                <div className="space-y-2">\n                  <label className="text-sm text-gray-400">Password:</label>\n                  <Input\n                    type="password"\n                    value={authData.password}\n                    onChange={(e) => setAuthData({...authData, password: e.target.value})}\n                    placeholder="Enter password (3+ chars)..."\n                    className="bg-gray-800 border-gray-700 text-white placeholder-gray-500"\n                  />\n                </div>\n                \n                <Button \n                  type="submit"\n                  disabled={!authData.username.trim() || !authData.password.trim() || authLoading}\n                  className="w-full bg-red-700 hover:bg-red-600 text-white font-semibold py-3 transition-all duration-300"\n                >\n                  {authLoading ? "Processing..." : (authMode === "login" ? "Login" : "Register")}\n                </Button>\n              </form>\n            </Tabs>\n            \n            <div className="text-xs text-gray-500 text-center leading-relaxed">\n              {authMode === "register" && "Password must be at least 3 characters. "}\n              This game contains mature psychological horror themes.\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  // Game Over Screen\n  if (gameOver) {\n    return (\n      <div className="min-h-screen bg-black text-white flex items-center justify-center relative">\n        <div className="absolute inset-0 bg-gradient-to-br from-black via-red-900 to-black"></div>\n        <Card className="w-full max-w-lg mx-4 bg-gray-900/95 border-red-600 shadow-2xl relative z-10">\n          <CardHeader className="text-center">\n            <Skull className="w-20 h-20 text-red-500 mx-auto mb-4 animate-pulse" />\n            <CardTitle className="text-4xl font-serif text-red-400 mb-4">\n              GAME OVER\n            </CardTitle>\n            \n            <div className="space-y-2 mb-4">\n              <div className="flex justify-between items-center">\n                <span className="text-gray-400">Final Score:</span>\n                <span className="text-yellow-400 font-bold text-xl">{gameState?.score || 0}</span>\n              </div>\n              <div className="flex justify-between items-center">\n                <span className="text-gray-400">Difficulty:</span>\n                <Badge className={getDifficultyBadge(gameState?.difficulty)}>\n                  {gameState?.difficulty?.toUpperCase()}\n                </Badge>\n              </div>\n            </div>\n            \n            {actionResult?.ending === "madness" && (\n              <p className="text-gray-300 text-lg">\n                Your mind couldn\'t handle the horrors within the house. \n                You have lost your grip on reality.\n              </p>\n            )}\n            {actionResult?.ending === "terror" && (\n              <p className="text-gray-300 text-lg">\n                The pure terror of the house has claimed another victim. \n                Your heart stopped from fear alone.\n              </p>\n            )}\n          </CardHeader>\n          <CardContent className="text-center space-y-4">\n            <div className="flex gap-3">\n              <Button \n                onClick={() => {\n                  setGameStarted(false);\n                  setGameOver(false);\n                  setPlayerName("");\n                  setActiveTab("game");\n                }}\n                className="flex-1 bg-red-700 hover:bg-red-600 text-white px-4 py-3"\n              >\n                <Play className="w-4 h-4 mr-2" />\n                Play Again\n              </Button>\n              <Button \n                onClick={() => {\n                  setGameStarted(false);\n                  setGameOver(false);\n                  setActiveTab("leaderboard");\n                }}\n                variant="outline"\n                className="flex-1 border-gray-600 text-gray-300 hover:bg-gray-700"\n              >\n                <Trophy className="w-4 h-4 mr-2" />\n                Leaderboard\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  // Main Game Interface\n  if (gameStarted) {\n    return (\n      <div className="min-h-screen bg-black text-white relative overflow-hidden">\n        <div className="absolute inset-0 bg-gradient-to-br from-gray-900 via-black to-gray-800"></div>\n        <div className="absolute inset-0 bg-noise opacity-10"></div>\n        \n        <div className="relative z-10 container mx-auto px-4 py-6">\n          {/* Header Stats */}\n          <Card className="mb-6 bg-gray-900/80 border-gray-700 shadow-xl">\n            <CardContent className="p-4">\n              <div className="flex flex-wrap items-center justify-between gap-4">\n                <div className="flex items-center gap-4">\n                  <div className="flex items-center gap-2">\n                    <Ghost className="w-6 h-6 text-red-400" />\n                    <span className="font-serif text-xl text-red-400">The House</span>\n                  </div>\n                  <Badge className={getDifficultyBadge(gameState?.difficulty)}>\n                    {gameState?.difficulty?.toUpperCase()}\n                  </Badge>\n                </div>\n                \n                <div className="flex items-center gap-6">\n                  <div className="flex items-center gap-2">\n                    <Star className="w-5 h-5 text-yellow-400" />\n                    <span className="text-sm text-gray-400">Score:</span>\n                    <span className="font-mono font-bold text-yellow-400">\n                      {gameState?.score || 0}\n                    </span>\n                  </div>\n                  \n                  <div className="flex items-center gap-2">\n                    <Brain className="w-5 h-5 text-blue-400" />\n                    <span className="text-sm text-gray-400">Sanity:</span>\n                    <span className={`font-mono font-bold ${getSanityColor(gameState?.sanity || 0)}`}>\n                      {gameState?.sanity || 0}%\n                    </span>\n                  </div>\n                  \n                  <div className="flex items-center gap-2">\n                    <Heart className="w-5 h-5 text-red-400" />\n                    <span className="text-sm text-gray-400">Fear:</span>\n                    <span className={`font-mono font-bold ${getFearColor(gameState?.fear_level || 0)}`}>\n                      {gameState?.fear_level || 0}%\n                    </span>\n                  </div>\n                  \n                  <Button\n                    onClick={() => {\n                      setGameStarted(false);\n                      setActiveTab("dashboard");\n                    }}\n                    variant="outline"\n                    size="sm"\n                    className="border-gray-600 text-gray-300 hover:bg-gray-700"\n                  >\n                    <Save className="w-4 h-4 mr-2" />\n                    Menu\n                  </Button>\n                </div>\n              </div>\n              \n              {/* Progress bars */}\n              <div className="mt-4 space-y-2">\n                <div className="grid grid-cols-2 gap-4">\n                  <div>\n                    <Progress \n                      value={gameState?.sanity || 0} \n                      className="h-2 bg-gray-800"\n                      style={{\n                        \'--progress-background\': gameState?.sanity > 50 ? \'#22c55e\' : gameState?.sanity > 25 ? \'#f59e0b\' : \'#ef4444\'\n                      }}\n                    />\n                  </div>\n                  <div>\n                    <Progress \n                      value={gameState?.fear_level || 0} \n                      className="h-2 bg-gray-800"\n                      style={{\n                        \'--progress-background\': \'#dc2626\'\n                      }}\n                    />\n                  </div>\n                </div>\n              </div>\n              \n              {actionResult?.score_earned > 0 && (\n                <div className="mt-2">\n                  <Alert className="border-yellow-800 bg-yellow-900/30">\n                    <Star className="w-4 h-4 text-yellow-400" />\n                    <AlertDescription className="text-yellow-300 text-sm">\n                      +{actionResult.score_earned} points earned!\n                    </AlertDescription>\n                  </Alert>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          <div className="grid lg:grid-cols-3 gap-6">\n            {/* Main Game Area */}\n            <div className="lg:col-span-2 space-y-6">\n              {/* Current Room */}\n              <Card className="bg-gray-900/90 border-gray-700 shadow-2xl">\n                <CardHeader>\n                  <div className="flex items-center gap-2 mb-2">\n                    <Home className="w-6 h-6 text-gray-400" />\n                    <CardTitle className="text-2xl font-serif text-red-400">\n                      {currentRoom?.name || "Unknown Location"}\n                    </CardTitle>\n                  </div>\n                </CardHeader>\n                <CardContent className="space-y-4">\n                  {/* Room Image */}\n                  {currentRoom?.image && (\n                    <div className="relative overflow-hidden rounded-lg border border-gray-700">\n                      <img \n                        src={currentRoom.image} \n                        alt={currentRoom.name}\n                        className="w-full h-64 object-cover filter brightness-75 contrast-125 sepia-[0.3]"\n                      />\n                      <div className="absolute inset-0 bg-gradient-to-t from-black/60 to-transparent"></div>\n                    </div>\n                  )}\n                  \n                  {/* Room Description */}\n                  <ScrollArea className="h-32">\n                    <p className="text-gray-300 leading-relaxed font-light text-sm">\n                      {currentRoom?.description || "You find yourself in an unknown place..."}\n                    </p>\n                  </ScrollArea>\n                  \n                  {/* Action Result */}\n                  {actionResult && (\n                    <Alert className="border-red-800 bg-red-900/30">\n                      <AlertTriangle className="w-4 h-4 text-red-400" />\n                      <AlertDescription className="text-red-300 text-sm">\n                        {actionResult.message}\n                      </AlertDescription>\n                    </Alert>\n                  )}\n                </CardContent>\n              </Card>\n\n              {/* Actions */}\n              <Card className="bg-gray-900/90 border-gray-700">\n                <CardHeader>\n                  <CardTitle className="text-lg text-gray-300 flex items-center gap-2">\n                    <ArrowRight className="w-5 h-5" />\n                    Available Actions\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">\n                    {currentRoom?.actions?.map((action, index) => (\n                      <Button\n                        key={index}\n                        onClick={() => {\n                          if (action.startsWith("go_") || action.includes("enter_") || action.includes("check_") || action.includes("upstairs") || action.includes("downstairs")) {\n                            performAction("move", action);\n                          } else if (action.startsWith("examine_") || action.startsWith("read_") || action.startsWith("open_") || action.startsWith("check_") || action.startsWith("look_")) {\n                            performAction("examine", action);\n                          } else {\n                            performAction("examine", action);\n                          }\n                        }}\n                        disabled={isLoading}\n                        variant="outline"\n                        className="bg-gray-800 border-gray-600 text-gray-300 hover:bg-gray-700 hover:text-white transition-all duration-200 text-sm py-2"\n                      >\n                        {action.replace(/_/g, " ").replace(/\\b\\w/g, l => l.toUpperCase())}\n                      </Button>\n                    )) || <p className="text-gray-500 text-sm">No actions available</p>}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Sidebar */}\n            <div className="space-y-6">\n              {/* Inventory */}\n              <Card className="bg-gray-900/90 border-gray-700">\n                <CardHeader>\n                  <CardTitle className="text-lg text-gray-300 flex items-center gap-2">\n                    <Package className="w-5 h-5" />\n                    Inventory\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <ScrollArea className="h-40">\n                    {inventory.length > 0 ? (\n                      <div className="space-y-3">\n                        {inventory.map((item, index) => (\n                          <div key={index} className="border border-gray-700 rounded-lg p-3 bg-gray-800/50">\n                            <div className="flex items-start justify-between mb-1">\n                              <span className="text-yellow-400 font-medium text-sm">\n                                {item.name}\n                              </span>\n                              <Badge variant="outline" className="text-xs text-yellow-600 border-yellow-800">\n                                +{item.score}\n                              </Badge>\n                            </div>\n                            <p className="text-gray-400 text-xs leading-relaxed">\n                              {item.description}\n                            </p>\n                          </div>\n                        ))}\n                      </div>\n                    ) : (\n                      <p className="text-gray-500 text-sm text-center py-8">\n                        Your pockets are empty...\n                      </p>\n                    )}\n                  </ScrollArea>\n                </CardContent>\n              </Card>\n\n              {/* Game Info */}\n              <Card className="bg-gray-900/90 border-gray-700">\n                <CardHeader>\n                  <CardTitle className="text-lg text-gray-300">Game Status</CardTitle>\n                </CardHeader>\n                <CardContent className="space-y-3">\n                  <div className="flex justify-between items-center">\n                    <span className="text-gray-400 text-sm">Player:</span>\n                    <span className="text-white font-medium">{gameState?.player_name}</span>\n                  </div>\n                  \n                  <Separator className="bg-gray-700" />\n                  \n                  <div className="text-xs text-gray-500 space-y-1">\n                    <p>• Explore each room carefully</p>\n                    <p>• Collect items to uncover the truth</p>\n                    <p>• Watch your sanity and fear levels</p>\n                    <p>• Higher difficulty = more score multiplier</p>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Dashboard/Menu Screen\n  return (\n    <div className="min-h-screen bg-black text-white relative overflow-hidden">\n      <div className="absolute inset-0 bg-gradient-to-br from-gray-900 via-black to-gray-800"></div>\n      <div className="absolute inset-0 bg-noise opacity-10"></div>\n      \n      <div className="relative z-10 container mx-auto px-4 py-6">\n        {/* Header */}\n        <Card className="mb-6 bg-gray-900/80 border-gray-700 shadow-xl">\n          <CardContent className="p-4">\n            <div className="flex items-center justify-between">\n              <div className="flex items-center gap-4">\n                <Ghost className="w-8 h-8 text-red-400" />\n                <div>\n                  <h1 className="text-2xl font-serif text-red-400">The House</h1>\n                  <p className="text-gray-400 text-sm">Welcome back, {currentUser?.username}</p>\n                </div>\n              </div>\n              \n              <div className="flex items-center gap-4">\n                <div className="text-right">\n                  <div className="text-yellow-400 font-bold">Total Score: {currentUser?.total_score || 0}</div>\n                  <div className="text-gray-400 text-sm">Games Played: {currentUser?.games_played || 0}</div>\n                </div>\n                <Button onClick={logout} variant="outline" size="sm" className="border-gray-600 text-gray-300 hover:bg-gray-700">\n                  <LogOut className="w-4 h-4 mr-2" />\n                  Logout\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Main Content */}\n        <Tabs value={activeTab} onValueChange={setActiveTab}>\n          <TabsList className="grid w-full grid-cols-3 bg-gray-800 mb-6">\n            <TabsTrigger value="game" className="data-[state=active]:bg-red-700">New Game</TabsTrigger>\n            <TabsTrigger value="saves" className="data-[state=active]:bg-red-700">Saved Games</TabsTrigger>\n            <TabsTrigger value="leaderboard" className="data-[state=active]:bg-red-700">Leaderboard</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value="game" className="space-y-6">\n            <Card className="bg-gray-900/90 border-gray-700">\n              <CardHeader>\n                <CardTitle className="text-xl text-red-400">Start New Game</CardTitle>\n              </CardHeader>\n              <CardContent className="space-y-6">\n                <div className="grid md:grid-cols-2 gap-6">\n                  <div className="space-y-4">\n                    <div>\n                      <label className="text-sm text-gray-400 mb-2 block">Character Name:</label>\n                      <Input\n                        type="text"\n                        value={playerName}\n                        onChange={(e) => setPlayerName(e.target.value)}\n                        placeholder="Enter character name..."\n                        className="bg-gray-800 border-gray-700 text-white"\n                      />\n                    </div>\n                    \n                    <div>\n                      <label className="text-sm text-gray-400 mb-2 block">Difficulty Level:</label>\n                      <Select value={selectedDifficulty} onValueChange={setSelectedDifficulty}>\n                        <SelectTrigger className="bg-gray-800 border-gray-700 text-white">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent className="bg-gray-800 border-gray-700">\n                          <SelectItem value="easy" className="text-green-400">Easy (0.5x fear, 1.0x score)</SelectItem>\n                          <SelectItem value="medium" className="text-yellow-400">Medium (1.0x fear, 1.5x score)</SelectItem>\n                          <SelectItem value="hard" className="text-orange-400">Hard (1.5x fear, 2.0x score)</SelectItem>\n                          <SelectItem value="insanity" className="text-red-400">Insanity (2.5x fear, 3.0x score)</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n                  \n                  <div className="space-y-4">\n                    <h3 className="text-lg text-gray-300">Difficulty Details:</h3>\n                    <div className="text-sm text-gray-400 space-y-2">\n                      <p><strong className="text-green-400">Easy:</strong> Reduced fear/sanity loss, normal scoring</p>\n                      <p><strong className="text-yellow-400">Medium:</strong> Balanced gameplay, bonus scoring</p>\n                      <p><strong className="text-orange-400">Hard:</strong> Increased fear/sanity loss, double scoring</p>\n                      <p><strong className="text-red-400">Insanity:</strong> Extreme difficulty, triple scoring</p>\n                    </div>\n                  </div>\n                </div>\n                \n                <Button \n                  onClick={startGame}\n                  disabled={!playerName.trim() || isLoading}\n                  className="w-full bg-red-700 hover:bg-red-600 text-white font-semibold py-3"\n                >\n                  {isLoading ? "Starting..." : "Enter the House"}\n                </Button>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value="saves" className="space-y-6">\n            <Card className="bg-gray-900/90 border-gray-700">\n              <CardHeader>\n                <CardTitle className="text-xl text-red-400">Saved Games</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {savedGames.length > 0 ? (\n                  <div className="space-y-4">\n                    {savedGames.map((game) => (\n                      <div key={game.id} className="border border-gray-700 rounded-lg p-4 bg-gray-800/50">\n                        <div className="flex items-center justify-between mb-2">\n                          <div className="flex items-center gap-3">\n                            <h3 className="text-white font-medium">{game.player_name}</h3>\n                            <Badge className={getDifficultyBadge(game.difficulty)}>\n                              {game.difficulty.toUpperCase()}\n                            </Badge>\n                          </div>\n                          <div className="text-yellow-400 font-mono">Score: {game.score}</div>\n                        </div>\n                        <div className="flex items-center justify-between text-sm text-gray-400 mb-3">\n                          <span>Room: {game.current_room.replace(\'_\', \' \')}</span>\n                          <span>Sanity: {game.sanity}% | Fear: {game.fear_level}%</span>\n                        </div>\n                        <Button \n                          onClick={() => resumeGame(game.id)}\n                          className="w-full bg-blue-700 hover:bg-blue-600"\n                        >\n                          <Play className="w-4 h-4 mr-2" />\n                          Resume Game\n                        </Button>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <p className="text-gray-500 text-center py-8">No saved games found</p>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value="leaderboard" className="space-y-6">\n            <div className="grid md:grid-cols-2 gap-6">\n              {/* Global Leaderboard */}\n              <Card className="bg-gray-900/90 border-gray-700">\n                <CardHeader>\n                  <CardTitle className="text-xl text-red-400 flex items-center gap-2">\n                    <Trophy className="w-5 h-5" />\n                    Global Leaderboard\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <ScrollArea className="h-96">\n                    {leaderboard.length > 0 ? (\n                      <div className="space-y-3">\n                        {leaderboard.map((score, index) => (\n                          <div key={score.id} className="flex items-center justify-between p-3 border border-gray-700 rounded-lg bg-gray-800/50">\n                            <div className="flex items-center gap-3">\n                              <div className="flex items-center justify-center w-8 h-8 rounded-full bg-gray-700">\n                                {index < 3 ? (\n                                  <Medal className={`w-4 h-4 ${index === 0 ? \'text-yellow-400\' : index === 1 ? \'text-gray-300\' : \'text-orange-400\'}`} />\n                                ) : (\n                                  <span className="text-sm text-gray-400">#{index + 1}</span>\n                                )}\n                              </div>\n                              <div>\n                                <div className="text-white font-medium">{score.username}</div>\n                                <div className="flex items-center gap-2">\n                                  <Badge className={getDifficultyBadge(score.difficulty)} size="sm">\n                                    {score.difficulty.toUpperCase()}\n                                  </Badge>\n                                  <span className="text-xs text-gray-400">\n                                    {formatTime(score.survival_time)}\n                                  </span>\n                                </div>\n                              </div>\n                            </div>\n                            <div className="text-right">\n                              <div className="text-yellow-400 font-bold">{score.score}</div>\n                              <div className="text-xs text-gray-400">{score.rooms_completed} rooms</div>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    ) : (\n                      <p className="text-gray-500 text-center py-8">No scores yet</p>\n                    )}\n                  </ScrollArea>\n                </CardContent>\n              </Card>\n\n              {/* Personal Best */}\n              <Card className="bg-gray-900/90 border-gray-700">\n                <CardHeader>\n                  <CardTitle className="text-xl text-red-400 flex items-center gap-2">\n                    <User className="w-5 h-5" />\n                    Your Best Scores\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <ScrollArea className="h-96">\n                    {personalBest.length > 0 ? (\n                      <div className="space-y-3">\n                        {personalBest.map((score, index) => (\n                          <div key={score.id} className="p-3 border border-gray-700 rounded-lg bg-gray-800/50">\n                            <div className="flex items-center justify-between mb-2">\n                              <Badge className={getDifficultyBadge(score.difficulty)}>\n                                {score.difficulty.toUpperCase()}\n                              </Badge>\n                              <div className="text-yellow-400 font-bold">{score.score}</div>\n                            </div>\n                            <div className="flex items-center justify-between text-sm text-gray-400">\n                              <span>{score.rooms_completed} rooms completed</span>\n                              <span className="flex items-center gap-1">\n                                <Clock className="w-3 h-3" />\n                                {formatTime(score.survival_time)}\n                              </span>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    ) : (\n                      <p className="text-gray-500 text-center py-8">Play a game to see your scores</p>\n                    )}\n                  </ScrollArea>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n};\n\nexport default HorrorGame;', 'import React, { useState, useEffect } from "react";\nimport "./App.css";\nimport axios from "axios";\nimport { Card, CardContent, CardHeader, CardTitle } from "./components/ui/card";\nimport { Button } from "./components/ui/button";\nimport { Badge } from "./components/ui/badge";\nimport { ScrollArea } from "./components/ui/scroll-area";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from "./components/ui/tabs";\nimport { Alert, AlertDescription } from "./components/ui/alert";\nimport { \n  Users, \n  Activity, \n  TrendingUp, \n  Eye, \n  Key, \n  RefreshCw,\n  Server,\n  Database,\n  AlertTriangle,\n  CheckCircle,\n  Clock,\n  GamepadIcon\n} from "lucide-react";\n\nconst BACKEND_URL = process.env.REACT_APP_BACKEND_URL;\nconst API = `${BACKEND_URL}/admin`;\n\nconst AdminDashboard = () => {\n  const [users, setUsers] = useState([]);\n  const [stats, setStats] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [selectedUser, setSelectedUser] = useState(null);\n  const [systemStatus, setSystemStatus] = useState("checking");\n\n  useEffect(() => {\n    loadDashboardData();\n    \n    // Auto-refresh every 30 seconds\n    const interval = setInterval(loadDashboardData, 30000);\n    return () => clearInterval(interval);\n  }, []);\n\n  const loadDashboardData = async () => {\n    setLoading(true);\n    try {\n      const [usersResponse, statsResponse] = await Promise.all([\n        axios.get(`${API}/users`),\n        axios.get(`${API}/stats`)\n      ]);\n      \n      setUsers(usersResponse.data);\n      setStats(statsResponse.data);\n      setSystemStatus("healthy");\n    } catch (error) {\n      console.error("Failed to load admin data:", error);\n      setSystemStatus("error");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getUserPassword = async (userId, username) => {\n    try {\n      const response = await axios.get(`${API}/users/${userId}/password`);\n      alert(`Password for ${username}: This is hashed in database. For demo purposes, minimal password is 3+ characters. Check your records or ask user to re-register if needed.`);\n    } catch (error) {\n      console.error("Failed to get password:", error);\n      alert("Failed to retrieve password information");\n    }\n  };\n\n  const formatDate = (dateString) => {\n    if (!dateString) return "Never";\n    return new Date(dateString).toLocaleString();\n  };\n\n  const getStatusColor = (status) => {\n    switch (status) {\n      case "healthy": return "text-green-400";\n      case "warning": return "text-yellow-400";\n      case "error": return "text-red-400";\n      default: return "text-gray-400";\n    }\n  };\n\n  const getStatusIcon = (status) => {\n    switch (status) {\n      case "healthy": return <CheckCircle className="w-5 h-5 text-green-400" />;\n      case "warning": return <AlertTriangle className="w-5 h-5 text-yellow-400" />;\n      case "error": return <AlertTriangle className="w-5 h-5 text-red-400" />;\n      default: return <Clock className="w-5 h-5 text-gray-400" />;\n    }\n  };\n\n  return (\n    <div className="min-h-screen bg-black text-white relative overflow-hidden">\n      <div className="absolute inset-0 bg-gradient-to-br from-gray-900 via-black to-blue-900"></div>\n      <div className="absolute inset-0 bg-noise opacity-10"></div>\n      \n      <div className="relative z-10 container mx-auto px-4 py-6">\n        {/* Header */}\n        <Card className="mb-6 bg-gray-900/80 border-blue-700 shadow-xl">\n          <CardContent className="p-4">\n            <div className="flex items-center justify-between">\n              <div className="flex items-center gap-4">\n                <Server className="w-8 h-8 text-blue-400" />\n                <div>\n                  <h1 className="text-2xl font-serif text-blue-400">Horror Game Admin</h1>\n                  <p className="text-gray-400 text-sm">System Monitoring & User Management</p>\n                </div>\n              </div>\n              \n              <div className="flex items-center gap-4">\n                <div className="flex items-center gap-2">\n                  {getStatusIcon(systemStatus)}\n                  <span className={`font-medium ${getStatusColor(systemStatus)}`}>\n                    {systemStatus === "healthy" ? "System Healthy" : \n                     systemStatus === "error" ? "System Error" : "Checking..."}\n                  </span>\n                </div>\n                <Button \n                  onClick={loadDashboardData}\n                  disabled={loading}\n                  variant="outline" \n                  size="sm" \n                  className="border-blue-600 text-blue-300 hover:bg-blue-700"\n                >\n                  <RefreshCw className={`w-4 h-4 mr-2 ${loading ? \'animate-spin\' : \'\'}`} />\n                  Refresh\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Stats Overview */}\n        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-6">\n          <Card className="bg-gray-900/90 border-gray-700">\n            <CardContent className="p-4">\n              <div className="flex items-center gap-3">\n                <Users className="w-8 h-8 text-blue-400" />\n                <div>\n                  <div className="text-2xl font-bold text-white">{stats.total_users || 0}</div>\n                  <div className="text-sm text-gray-400">Total Users</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className="bg-gray-900/90 border-gray-700">\n            <CardContent className="p-4">\n              <div className="flex items-center gap-3">\n                <GamepadIcon className="w-8 h-8 text-green-400" />\n                <div>\n                  <div className="text-2xl font-bold text-white">{stats.total_games || 0}</div>\n                  <div className="text-sm text-gray-400">Total Games</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className="bg-gray-900/90 border-gray-700">\n            <CardContent className="p-4">\n              <div className="flex items-center gap-3">\n                <Activity className="w-8 h-8 text-yellow-400" />\n                <div>\n                  <div className="text-2xl font-bold text-white">{stats.active_games || 0}</div>\n                  <div className="text-sm text-gray-400">Active Games</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className="bg-gray-900/90 border-gray-700">\n            <CardContent className="p-4">\n              <div className="flex items-center gap-3">\n                <TrendingUp className="w-8 h-8 text-purple-400" />\n                <div>\n                  <div className="text-2xl font-bold text-white">{stats.completed_games || 0}</div>\n                  <div className="text-sm text-gray-400">Completed Games</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Main Content */}\n        <Tabs defaultValue="users" className="space-y-6">\n          <TabsList className="grid w-full grid-cols-3 bg-gray-800">\n            <TabsTrigger value="users" className="data-[state=active]:bg-blue-700">User Management</TabsTrigger>\n            <TabsTrigger value="system" className="data-[state=active]:bg-blue-700">System Status</TabsTrigger>\n            <TabsTrigger value="support" className="data-[state=active]:bg-blue-700">User Support</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value="users" className="space-y-6">\n            <Card className="bg-gray-900/90 border-gray-700">\n              <CardHeader>\n                <CardTitle className="text-xl text-blue-400">Registered Users</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ScrollArea className="h-96">\n                  {users.length > 0 ? (\n                    <div className="space-y-4">\n                      {users.map((user) => (\n                        <div key={user.id} className="border border-gray-700 rounded-lg p-4 bg-gray-800/50">\n                          <div className="flex items-center justify-between mb-3">\n                            <div className="flex items-center gap-3">\n                              <div className="w-10 h-10 rounded-full bg-blue-600 flex items-center justify-center">\n                                <Users className="w-5 h-5 text-white" />\n                              </div>\n                              <div>\n                                <h3 className="text-white font-medium">{user.username}</h3>\n                                <p className="text-sm text-gray-400">ID: {user.id}</p>\n                              </div>\n                            </div>\n                            <div className="text-right">\n                              <div className="text-yellow-400 font-bold">Score: {user.total_score}</div>\n                              <div className="text-sm text-gray-400">Games: {user.games_played}</div>\n                            </div>\n                          </div>\n                          \n                          <div className="grid grid-cols-2 gap-4 text-sm mb-3">\n                            <div>\n                              <span className="text-gray-400">Created:</span>\n                              <div className="text-white">{formatDate(user.created_at)}</div>\n                            </div>\n                            <div>\n                              <span className="text-gray-400">Last Login:</span>\n                              <div className="text-white">{formatDate(user.last_login)}</div>\n                            </div>\n                          </div>\n                          \n                          <div className="flex gap-2">\n                            <Button\n                              onClick={() => getUserPassword(user.id, user.username)}\n                              size="sm"\n                              variant="outline"\n                              className="border-yellow-600 text-yellow-300 hover:bg-yellow-700"\n                            >\n                              <Key className="w-4 h-4 mr-2" />\n                              View Password Info\n                            </Button>\n                            <Button\n                              onClick={() => setSelectedUser(user)}\n                              size="sm"\n                              variant="outline"\n                              className="border-blue-600 text-blue-300 hover:bg-blue-700"\n                            >\n                              <Eye className="w-4 h-4 mr-2" />\n                              View Details\n                            </Button>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <p className="text-gray-500 text-center py-8">No users found</p>\n                  )}\n                </ScrollArea>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value="system" className="space-y-6">\n            <div className="grid md:grid-cols-2 gap-6">\n              <Card className="bg-gray-900/90 border-gray-700">\n                <CardHeader>\n                  <CardTitle className="text-xl text-blue-400 flex items-center gap-2">\n                    <Database className="w-5 h-5" />\n                    Database Status\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className="space-y-4">\n                  <div className="flex items-center justify-between">\n                    <span className="text-gray-400">Connection:</span>\n                    <Badge className="bg-green-900 text-green-400 border-green-800">\n                      Connected\n                    </Badge>\n                  </div>\n                  <div className="flex items-center justify-between">\n                    <span className="text-gray-400">Users Collection:</span>\n                    <Badge className="bg-blue-900 text-blue-400 border-blue-800">\n                      Active\n                    </Badge>\n                  </div>\n                  <div className="flex items-center justify-between">\n                    <span className="text-gray-400">Games Collection:</span>\n                    <Badge className="bg-blue-900 text-blue-400 border-blue-800">\n                      Active\n                    </Badge>\n                  </div>\n                  <div className="flex items-center justify-between">\n                    <span className="text-gray-400">High Scores:</span>\n                    <Badge className="bg-blue-900 text-blue-400 border-blue-800">\n                      Active\n                    </Badge>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className="bg-gray-900/90 border-gray-700">\n                <CardHeader>\n                  <CardTitle className="text-xl text-blue-400 flex items-center gap-2">\n                    <Server className="w-5 h-5" />\n                    API Status\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className="space-y-4">\n                  <div className="flex items-center justify-between">\n                    <span className="text-gray-400">Backend:</span>\n                    <Badge className="bg-green-900 text-green-400 border-green-800">\n                      Running\n                    </Badge>\n                  </div>\n                  <div className="flex items-center justify-between">\n                    <span className="text-gray-400">Frontend:</span>\n                    <Badge className="bg-green-900 text-green-400 border-green-800">\n                      Running\n                    </Badge>\n                  </div>\n                  <div className="flex items-center justify-between">\n                    <span className="text-gray-400">CORS:</span>\n                    <Badge className="bg-green-900 text-green-400 border-green-800">\n                      Configured\n                    </Badge>\n                  </div>\n                  <div className="flex items-center justify-between">\n                    <span className="text-gray-400">Auth:</span>\n                    <Badge className="bg-green-900 text-green-400 border-green-800">\n                      JWT Active\n                    </Badge>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            <Card className="bg-gray-900/90 border-gray-700">\n              <CardHeader>\n                <CardTitle className="text-xl text-blue-400">System Information</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className="grid md:grid-cols-3 gap-6">\n                  <div>\n                    <h3 className="text-lg text-white mb-2">Application</h3>\n                    <div className="space-y-1 text-sm">\n                      <div><span className="text-gray-400">Name:</span> The House Horror Game</div>\n                      <div><span className="text-gray-400">Version:</span> 2.0.0</div>\n                      <div><span className="text-gray-400">Environment:</span> Production</div>\n                    </div>\n                  </div>\n                  <div>\n                    <h3 className="text-lg text-white mb-2">Features</h3>\n                    <div className="space-y-1 text-sm">\n                      <div><span className="text-gray-400">Auth:</span> JWT Token Based</div>\n                      <div><span className="text-gray-400">Scoring:</span> Multi-Difficulty</div>\n                      <div><span className="text-gray-400">Saves:</span> Progress Persistence</div>\n                    </div>\n                  </div>\n                  <div>\n                    <h3 className="text-lg text-white mb-2">Security</h3>\n                    <div className="space-y-1 text-sm">\n                      <div><span className="text-gray-400">Password:</span> 3+ Characters Min</div>\n                      <div><span className="text-gray-400">Session:</span> 24hr Expiry</div>\n                      <div><span className="text-gray-400">HTTPS:</span> Enabled</div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value="support" className="space-y-6">\n            <Card className="bg-gray-900/90 border-gray-700">\n              <CardHeader>\n                <CardTitle className="text-xl text-blue-400">User Support Tools</CardTitle>\n              </CardHeader>\n              <CardContent className="space-y-6">\n                <Alert className="border-yellow-800 bg-yellow-900/30">\n                  <AlertTriangle className="w-4 h-4 text-yellow-400" />\n                  <AlertDescription className="text-yellow-300">\n                    <strong>Password Recovery:</strong> For users who forgot their passwords, they can re-register with the same username. \n                    Passwords are hashed for security. Minimum requirement is 3+ characters.\n                  </AlertDescription>\n                </Alert>\n\n                <div className="space-y-4">\n                  <h3 className="text-lg text-white">Common Support Issues:</h3>\n                  \n                  <div className="space-y-3">\n                    <div className="border border-gray-700 rounded-lg p-4 bg-gray-800/50">\n                      <h4 className="text-white font-medium mb-2">Forgot Password</h4>\n                      <p className="text-gray-400 text-sm mb-2">\n                        Users can re-register with the same username. Previous game scores will be preserved.\n                      </p>\n                      <Badge className="bg-blue-900 text-blue-400 border-blue-800">\n                        Solution: Re-registration\n                      </Badge>\n                    </div>\n\n                    <div className="border border-gray-700 rounded-lg p-4 bg-gray-800/50">\n                      <h4 className="text-white font-medium mb-2">Game Not Loading</h4>\n                      <p className="text-gray-400 text-sm mb-2">\n                        Check if user is properly logged in and has a valid session token.\n                      </p>\n                      <Badge className="bg-green-900 text-green-400 border-green-800">\n                        Solution: Re-login\n                      </Badge>\n                    </div>\n\n                    <div className="border border-gray-700 rounded-lg p-4 bg-gray-800/50">\n                      <h4 className="text-white font-medium mb-2">Lost Progress</h4>\n                      <p className="text-gray-400 text-sm mb-2">\n                        Games are automatically saved. Check the "Saved Games" tab in user\'s dashboard.\n                      </p>\n                      <Badge className="bg-purple-900 text-purple-400 border-purple-800">\n                        Solution: Resume from saves\n                      </Badge>\n                    </div>\n                  </div>\n                </div>\n\n                <div className="border-t border-gray-700 pt-4">\n                  <h3 className="text-lg text-white mb-3">Admin Actions:</h3>\n                  <div className="flex gap-3">\n                    <Button \n                      onClick={() => alert("Feature coming soon: Reset user progress")}\n                      variant="outline"\n                      className="border-red-600 text-red-300 hover:bg-red-700"\n                    >\n                      Reset User Progress\n                    </Button>\n                    <Button \n                      onClick={() => alert("Feature coming soon: Send user notification")}\n                      variant="outline"\n                      className="border-blue-600 text-blue-300 hover:bg-blue-700"\n                    >\n                      Send Notification\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n\n        {/* User Details Modal */}\n        {selectedUser && (\n          <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">\n            <Card className="w-full max-w-lg mx-4 bg-gray-900 border-blue-700">\n              <CardHeader>\n                <CardTitle className="text-xl text-blue-400">User Details: {selectedUser.username}</CardTitle>\n              </CardHeader>\n              <CardContent className="space-y-4">\n                <div className="grid grid-cols-2 gap-4 text-sm">\n                  <div>\n                    <span className="text-gray-400">User ID:</span>\n                    <div className="text-white font-mono text-xs">{selectedUser.id}</div>\n                  </div>\n                  <div>\n                    <span className="text-gray-400">Total Score:</span>\n                    <div className="text-yellow-400 font-bold">{selectedUser.total_score}</div>\n                  </div>\n                  <div>\n                    <span className="text-gray-400">Games Played:</span>\n                    <div className="text-white">{selectedUser.games_played}</div>\n                  </div>\n                  <div>\n                    <span className="text-gray-400">Registration:</span>\n                    <div className="text-white">{formatDate(selectedUser.created_at)}</div>\n                  </div>\n                  <div className="col-span-2">\n                    <span className="text-gray-400">Last Login:</span>\n                    <div className="text-white">{formatDate(selectedUser.last_login)}</div>\n                  </div>\n                </div>\n                \n                <div className="flex gap-3">\n                  <Button\n                    onClick={() => getUserPassword(selectedUser.id, selectedUser.username)}\n                    className="flex-1 bg-yellow-700 hover:bg-yellow-600"\n                  >\n                    <Key className="w-4 h-4 mr-2" />\n                    Password Info\n                  </Button>\n                  <Button\n                    onClick={() => setSelectedUser(null)}\n                    variant="outline"\n                    className="border-gray-600 text-gray-300"\n                  >\n                    Close\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default AdminDashboard;', '<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Horror Game Admin Dashboard</title>\n    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />\n    <script src="https://unpkg.com/react@18/umd/react.development.js"></script>\n    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>\n    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>\n    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">\n    <style>\n        @import url(\'https://fonts.googleapis.com/css2?family=Crimson+Text:ital,wght@0,400;0,600;1,400&family=JetBrains+Mono:wght@300;400;500&display=swap\');\n        \n        body {\n            font-family: \'Crimson Text\', serif;\n            background: #000000;\n            color: #ffffff;\n            overflow-x: hidden;\n            line-height: 1.6;\n        }\n        \n        .bg-noise {\n            background-image: radial-gradient(circle at 1px 1px, rgba(255,255,255,0.15) 1px, transparent 0);\n            background-size: 20px 20px;\n        }\n        \n        .font-serif { font-family: \'Crimson Text\', serif; }\n        .font-mono { font-family: \'JetBrains Mono\', monospace; }\n    </style>\n</head>\n<body>\n    <div id="admin-root"></div>\n    \n    <script type="text/babel">\n        // Simple admin dashboard without complex components\n        const AdminDashboard = () => {\n            const [users, setUsers] = React.useState([]);\n            const [stats, setStats] = React.useState({});\n            const [loading, setLoading] = React.useState(false);\n            const [activeTab, setActiveTab] = React.useState(\'users\');\n            \n            const BACKEND_URL = window.location.origin;\n            const API = `${BACKEND_URL}/admin`;\n            \n            React.useEffect(() => {\n                loadDashboardData();\n                const interval = setInterval(loadDashboardData, 30000);\n                return () => clearInterval(interval);\n            }, []);\n            \n            const loadDashboardData = async () => {\n                setLoading(true);\n                try {\n                    const [usersResponse, statsResponse] = await Promise.all([\n                        fetch(`${API}/users`).then(r => r.json()),\n                        fetch(`${API}/stats`).then(r => r.json())\n                    ]);\n                    \n                    setUsers(usersResponse);\n                    setStats(statsResponse);\n                } catch (error) {\n                    console.error("Failed to load admin data:", error);\n                } finally {\n                    setLoading(false);\n                }\n            };\n            \n            const getUserPassword = async (userId, username) => {\n                try {\n                    const response = await fetch(`${API}/users/${userId}/password`);\n                    const data = await response.json();\n                    alert(`Password for ${username}: Passwords are hashed for security. For support, users can re-register with same username (3+ chars minimum).`);\n                } catch (error) {\n                    alert("Failed to retrieve password information. Passwords are hashed for security.");\n                }\n            };\n            \n            const formatDate = (dateString) => {\n                if (!dateString) return "Never";\n                return new Date(dateString).toLocaleString();\n            };\n            \n            return (\n                <div className="min-h-screen bg-black text-white relative">\n                    <div className="absolute inset-0 bg-gradient-to-br from-gray-900 via-black to-blue-900 opacity-80"></div>\n                    <div className="absolute inset-0 bg-noise opacity-10"></div>\n                    \n                    <div className="relative z-10 container mx-auto px-4 py-6">\n                        {/* Header */}\n                        <div className="bg-gray-900 border border-blue-700 rounded-lg p-6 mb-6 shadow-xl">\n                            <div className="flex items-center justify-between">\n                                <div className="flex items-center gap-4">\n                                    <div className="w-12 h-12 bg-blue-600 rounded-lg flex items-center justify-center">\n                                        <span className="text-2xl">🖥️</span>\n                                    </div>\n                                    <div>\n                                        <h1 className="text-3xl font-serif text-blue-400">Horror Game Admin</h1>\n                                        <p className="text-gray-400">System Monitoring & User Management</p>\n                                    </div>\n                                </div>\n                                \n                                <button \n                                    onClick={loadDashboardData}\n                                    disabled={loading}\n                                    className="px-4 py-2 bg-blue-700 hover:bg-blue-600 border border-blue-600 rounded-lg text-white transition-colors"\n                                >\n                                    {loading ? \'🔄\' : \'↻\'} Refresh\n                                </button>\n                            </div>\n                        </div>\n                        \n                        {/* Stats Overview */}\n                        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-6">\n                            <div className="bg-gray-900 border border-gray-700 rounded-lg p-4">\n                                <div className="flex items-center gap-3">\n                                    <div className="text-3xl">👥</div>\n                                    <div>\n                                        <div className="text-2xl font-bold text-white">{stats.total_users || 0}</div>\n                                        <div className="text-sm text-gray-400">Total Users</div>\n                                    </div>\n                                </div>\n                            </div>\n                            \n                            <div className="bg-gray-900 border border-gray-700 rounded-lg p-4">\n                                <div className="flex items-center gap-3">\n                                    <div className="text-3xl">🎮</div>\n                                    <div>\n                                        <div className="text-2xl font-bold text-white">{stats.total_games || 0}</div>\n                                        <div className="text-sm text-gray-400">Total Games</div>\n                                    </div>\n                                </div>\n                            </div>\n                            \n                            <div className="bg-gray-900 border border-gray-700 rounded-lg p-4">\n                                <div className="flex items-center gap-3">\n                                    <div className="text-3xl">🔥</div>\n                                    <div>\n                                        <div className="text-2xl font-bold text-white">{stats.active_games || 0}</div>\n                                        <div className="text-sm text-gray-400">Active Games</div>\n                                    </div>\n                                </div>\n                            </div>\n                            \n                            <div className="bg-gray-900 border border-gray-700 rounded-lg p-4">\n                                <div className="flex items-center gap-3">\n                                    <div className="text-3xl">✅</div>\n                                    <div>\n                                        <div className="text-2xl font-bold text-white">{stats.completed_games || 0}</div>\n                                        <div className="text-sm text-gray-400">Completed</div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        \n                        {/* Tabs */}\n                        <div className="bg-gray-800 rounded-lg p-1 mb-6 flex">\n                            <button \n                                onClick={() => setActiveTab(\'users\')}\n                                className={`flex-1 py-2 px-4 rounded-md transition-colors ${activeTab === \'users\' ? \'bg-blue-700 text-white\' : \'text-gray-400 hover:text-white\'}`}\n                            >\n                                User Management\n                            </button>\n                            <button \n                                onClick={() => setActiveTab(\'system\')}\n                                className={`flex-1 py-2 px-4 rounded-md transition-colors ${activeTab === \'system\' ? \'bg-blue-700 text-white\' : \'text-gray-400 hover:text-white\'}`}\n                            >\n                                System Status\n                            </button>\n                            <button \n                                onClick={() => setActiveTab(\'support\')}\n                                className={`flex-1 py-2 px-4 rounded-md transition-colors ${activeTab === \'support\' ? \'bg-blue-700 text-white\' : \'text-gray-400 hover:text-white\'}`}\n                            >\n                                User Support\n                            </button>\n                        </div>\n                        \n                        {/* Tab Content */}\n                        {activeTab === \'users\' && (\n                            <div className="bg-gray-900 border border-gray-700 rounded-lg p-6">\n                                <h2 className="text-xl text-blue-400 mb-4">👥 Registered Users</h2>\n                                <div className="max-h-96 overflow-y-auto space-y-4">\n                                    {users.length > 0 ? users.map((user) => (\n                                        <div key={user.id} className="border border-gray-700 rounded-lg p-4 bg-gray-800">\n                                            <div className="flex items-center justify-between mb-3">\n                                                <div className="flex items-center gap-3">\n                                                    <div className="w-10 h-10 rounded-full bg-blue-600 flex items-center justify-center text-white font-bold">\n                                                        {user.username.charAt(0).toUpperCase()}\n                                                    </div>\n                                                    <div>\n                                                        <h3 className="text-white font-medium">{user.username}</h3>\n                                                        <p className="text-sm text-gray-400 font-mono">{user.id}</p>\n                                                    </div>\n                                                </div>\n                                                <div className="text-right">\n                                                    <div className="text-yellow-400 font-bold">Score: {user.total_score}</div>\n                                                    <div className="text-sm text-gray-400">Games: {user.games_played}</div>\n                                                </div>\n                                            </div>\n                                            \n                                            <div className="grid grid-cols-2 gap-4 text-sm mb-3">\n                                                <div>\n                                                    <span className="text-gray-400">Created:</span>\n                                                    <div className="text-white">{formatDate(user.created_at)}</div>\n                                                </div>\n                                                <div>\n                                                    <span className="text-gray-400">Last Login:</span>\n                                                    <div className="text-white">{formatDate(user.last_login)}</div>\n                                                </div>\n                                            </div>\n                                            \n                                            <button\n                                                onClick={() => getUserPassword(user.id, user.username)}\n                                                className="px-4 py-2 bg-yellow-700 hover:bg-yellow-600 border border-yellow-600 rounded text-white text-sm transition-colors"\n                                            >\n                                                🔑 Password Support\n                                            </button>\n                                        </div>\n                                    )) : (\n                                        <p className="text-gray-500 text-center py-8">No users found</p>\n                                    )}\n                                </div>\n                            </div>\n                        )}\n                        \n                        {activeTab === \'system\' && (\n                            <div className="space-y-6">\n                                <div className="grid md:grid-cols-2 gap-6">\n                                    <div className="bg-gray-900 border border-gray-700 rounded-lg p-6">\n                                        <h3 className="text-xl text-blue-400 mb-4">🗄️ Database Status</h3>\n                                        <div className="space-y-3">\n                                            <div className="flex justify-between">\n                                                <span className="text-gray-400">Connection:</span>\n                                                <span className="px-2 py-1 bg-green-900 text-green-400 rounded text-sm">Connected</span>\n                                            </div>\n                                            <div className="flex justify-between">\n                                                <span className="text-gray-400">Collections:</span>\n                                                <span className="px-2 py-1 bg-blue-900 text-blue-400 rounded text-sm">Active</span>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    \n                                    <div className="bg-gray-900 border border-gray-700 rounded-lg p-6">\n                                        <h3 className="text-xl text-blue-400 mb-4">🖥️ API Status</h3>\n                                        <div className="space-y-3">\n                                            <div className="flex justify-between">\n                                                <span className="text-gray-400">Backend:</span>\n                                                <span className="px-2 py-1 bg-green-900 text-green-400 rounded text-sm">Running</span>\n                                            </div>\n                                            <div className="flex justify-between">\n                                                <span className="text-gray-400">Auth:</span>\n                                                <span className="px-2 py-1 bg-green-900 text-green-400 rounded text-sm">JWT Active</span>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                                \n                                <div className="bg-gray-900 border border-gray-700 rounded-lg p-6">\n                                    <h3 className="text-xl text-blue-400 mb-4">ℹ️ System Information</h3>\n                                    <div className="grid md:grid-cols-3 gap-6">\n                                        <div>\n                                            <h4 className="text-white font-medium mb-2">Application</h4>\n                                            <div className="text-sm space-y-1">\n                                                <div><span className="text-gray-400">Name:</span> The House Horror Game</div>\n                                                <div><span className="text-gray-400">Version:</span> 2.0.0</div>\n                                                <div><span className="text-gray-400">Environment:</span> Production</div>\n                                            </div>\n                                        </div>\n                                        <div>\n                                            <h4 className="text-white font-medium mb-2">Features</h4>\n                                            <div className="text-sm space-y-1">\n                                                <div><span className="text-gray-400">Auth:</span> JWT Token Based</div>\n                                                <div><span className="text-gray-400">Scoring:</span> Multi-Difficulty</div>\n                                                <div><span className="text-gray-400">Saves:</span> Progress Persistence</div>\n                                            </div>\n                                        </div>\n                                        <div>\n                                            <h4 className="text-white font-medium mb-2">Security</h4>\n                                            <div className="text-sm space-y-1">\n                                                <div><span className="text-gray-400">Password:</span> 3+ Characters Min</div>\n                                                <div><span className="text-gray-400">Session:</span> 24hr Expiry</div>\n                                                <div><span className="text-gray-400">HTTPS:</span> Enabled</div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        )}\n                        \n                        {activeTab === \'support\' && (\n                            <div className="bg-gray-900 border border-gray-700 rounded-lg p-6">\n                                <h2 className="text-xl text-blue-400 mb-4">🛠️ User Support Tools</h2>\n                                \n                                <div className="bg-yellow-900 border border-yellow-800 rounded-lg p-4 mb-6">\n                                    <div className="flex items-start gap-3">\n                                        <div className="text-yellow-400 text-xl">⚠️</div>\n                                        <div>\n                                            <div className="text-yellow-300 font-medium mb-1">Password Recovery</div>\n                                            <div className="text-yellow-200 text-sm">\n                                                For users who forgot passwords, they can re-register with the same username. \n                                                Passwords are hashed for security (minimum 3+ characters).\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                                \n                                <div className="space-y-4">\n                                    <h3 className="text-lg text-white">Common Support Issues:</h3>\n                                    \n                                    <div className="space-y-3">\n                                        <div className="border border-gray-700 rounded-lg p-4 bg-gray-800">\n                                            <h4 className="text-white font-medium mb-2">🔑 Forgot Password</h4>\n                                            <p className="text-gray-400 text-sm mb-2">\n                                                Users can re-register with the same username. Previous scores preserved.\n                                            </p>\n                                            <span className="px-2 py-1 bg-blue-900 text-blue-400 rounded text-xs">\n                                                Solution: Re-registration\n                                            </span>\n                                        </div>\n                                        \n                                        <div className="border border-gray-700 rounded-lg p-4 bg-gray-800">\n                                            <h4 className="text-white font-medium mb-2">🚫 Game Not Loading</h4>\n                                            <p className="text-gray-400 text-sm mb-2">\n                                                Check if user has valid session token and is properly logged in.\n                                            </p>\n                                            <span className="px-2 py-1 bg-green-900 text-green-400 rounded text-xs">\n                                                Solution: Re-login\n                                            </span>\n                                        </div>\n                                        \n                                        <div className="border border-gray-700 rounded-lg p-4 bg-gray-800">\n                                            <h4 className="text-white font-medium mb-2">💾 Lost Progress</h4>\n                                            <p className="text-gray-400 text-sm mb-2">\n                                                Games auto-save. Check "Saved Games" tab in user dashboard.\n                                            </p>\n                                            <span className="px-2 py-1 bg-purple-900 text-purple-400 rounded text-xs">\n                                                Solution: Resume from saves\n                                            </span>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        )}\n                    </div>\n                </div>\n            );\n        };\n        \n        ReactDOM.render(<AdminDashboard />, document.getElementById(\'admin-root\'));\n    </script>\n</body>\n</html>']
Observation: /root/runs/d9fe6e31-0c82-4292-a7a8-a8342493410f/command.sh: 1: bulk_file_creator: Argument list too long
